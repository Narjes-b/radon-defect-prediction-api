{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Receptor documentation Modern software relies massively on the use of automation at both development and operations levels, and engineering strategy known as DevOps . The software code driving such automations is collectively known as Infrastructure-as-Code (IaC). While IaC represents an ever increasing widely-adopted practice nowadays,little is known how to best mantain, speedily evolve, and continuously improve the code behing the IaC strategy. As any other source code artifact, IaC blueprints can be defect-prone! Receptor represents a step forward towards closing the gap for the implementation of software quality instruments to support DevOps engineers when developing and maintaining infrastructure code. It provides functionality for quantifying the characteristic of a IaC blueprint and predicting its defect proneness. Although it currently supports only Ansible, it is supposed to be soon extended to the OASIS Topology and Orchestration Specification for Cloud Applications (TOSCA) ecosystem. Effective prediction of defect-prone IaC blueprints may enable DevOps to focus on such critical scripts duging Quality Assurance activities, and allocate effort and resources more efficiently! Ultimately, this enables continuous deloyment and accelerates the expected Return on Investment. How to build and run Installation is made simple by the Docker technology. Clone the repository and run the following command within the project folder: docker build -t radon-dp:latest . then run it with docker run -p 5000:5000 radon-dp:latest How to use You can test the /classify API as follows: curl -X POST \"http://localhost:5000/api/classification/classify\" -H \"accept: */*\" -H \"Content-Type: plain/text\" -d \"- host: all\" Related tools AnsibleMetrics: AnsibleMetrics is a tool to quantify the characteristic of infrastructure code used by the defect predictor to extract metrics from an Ansible blueprint and use them for the detection of defects. Visual Studio Extension: available on the VSC Marketplace at this link .","title":"Quick Start"},{"location":"#welcome-to-the-receptor-documentation","text":"Modern software relies massively on the use of automation at both development and operations levels, and engineering strategy known as DevOps . The software code driving such automations is collectively known as Infrastructure-as-Code (IaC). While IaC represents an ever increasing widely-adopted practice nowadays,little is known how to best mantain, speedily evolve, and continuously improve the code behing the IaC strategy. As any other source code artifact, IaC blueprints can be defect-prone! Receptor represents a step forward towards closing the gap for the implementation of software quality instruments to support DevOps engineers when developing and maintaining infrastructure code. It provides functionality for quantifying the characteristic of a IaC blueprint and predicting its defect proneness. Although it currently supports only Ansible, it is supposed to be soon extended to the OASIS Topology and Orchestration Specification for Cloud Applications (TOSCA) ecosystem. Effective prediction of defect-prone IaC blueprints may enable DevOps to focus on such critical scripts duging Quality Assurance activities, and allocate effort and resources more efficiently! Ultimately, this enables continuous deloyment and accelerates the expected Return on Investment.","title":"Welcome to the Receptor documentation"},{"location":"#how-to-build-and-run","text":"Installation is made simple by the Docker technology. Clone the repository and run the following command within the project folder: docker build -t radon-dp:latest . then run it with docker run -p 5000:5000 radon-dp:latest","title":"How to build and run"},{"location":"#how-to-use","text":"You can test the /classify API as follows: curl -X POST \"http://localhost:5000/api/classification/classify\" -H \"accept: */*\" -H \"Content-Type: plain/text\" -d \"- host: all\"","title":"How to use"},{"location":"#related-tools","text":"AnsibleMetrics: AnsibleMetrics is a tool to quantify the characteristic of infrastructure code used by the defect predictor to extract metrics from an Ansible blueprint and use them for the detection of defects. Visual Studio Extension: available on the VSC Marketplace at this link .","title":"Related tools"},{"location":"about/","text":"","title":"About"},{"location":"api/classify/","text":"api/classification/classify Allows to detect defects in an YAML blueprint. URL /api/classification/classify METHOD POST BODY plain/text A plain YAML, for example: --- - host: all tasks: - name: \"A task\" debug: msg: \"Hello World!\" RESPONSE Success response A success response returns a JSON file consisting of the following fields: defective: <boolean> indicating whether the script has been predicted as defect-prone ( true ) or defect-free ( false ); metrics: <object> consisting of a JSON object of (metric, value) pairs. For example Code: 200 Content: { \"defective\": true, \"metrics\": { \"num_plays\": 1, \"num_tasks\": 1, ... } } Error response If the content is not a valid YAML (empty or bad-formatted) the APIs return and error response. Code: 422 UNPROCESSABLE ENTRY Content: { error : \"YAML Invalid\" }","title":"api/classification/classify"},{"location":"api/classify/#apiclassificationclassify","text":"Allows to detect defects in an YAML blueprint. URL /api/classification/classify METHOD POST BODY plain/text A plain YAML, for example: --- - host: all tasks: - name: \"A task\" debug: msg: \"Hello World!\" RESPONSE Success response A success response returns a JSON file consisting of the following fields: defective: <boolean> indicating whether the script has been predicted as defect-prone ( true ) or defect-free ( false ); metrics: <object> consisting of a JSON object of (metric, value) pairs. For example Code: 200 Content: { \"defective\": true, \"metrics\": { \"num_plays\": 1, \"num_tasks\": 1, ... } } Error response If the content is not a valid YAML (empty or bad-formatted) the APIs return and error response. Code: 422 UNPROCESSABLE ENTRY Content: { error : \"YAML Invalid\" }","title":"api/classification/classify"},{"location":"api/metrics/","text":"api/metrics Allows to extract source code properties from YAML blueprint. URL /api/metrics/all List information about the Ansible metrics. METHOD GET RESPONSE Success response A success response returns a JSON array of (metric, description) pairs. For example Code: 200 Content: [ \"num_plays\": \"Number of plays\", \"num_tasks\": \"Number of tasks, ... ] URL /api/metrics/run_all Extract metrics from an Ansible blueprint. METHOD POST BODY plain/text A plain YAML, for example: --- - host: all tasks: - name: \"A task\" debug: msg: \"Hello World!\" RESPONSE Success response A success response returns a JSON file consisting of (metric, value) pairs. For example Code: 200 Content: { \"num_plays\": 1, \"num_tasks\": 1, ... }","title":"api/metrics"},{"location":"api/metrics/#apimetrics","text":"Allows to extract source code properties from YAML blueprint. URL /api/metrics/all List information about the Ansible metrics. METHOD GET RESPONSE Success response A success response returns a JSON array of (metric, description) pairs. For example Code: 200 Content: [ \"num_plays\": \"Number of plays\", \"num_tasks\": \"Number of tasks, ... ] URL /api/metrics/run_all Extract metrics from an Ansible blueprint. METHOD POST BODY plain/text A plain YAML, for example: --- - host: all tasks: - name: \"A task\" debug: msg: \"Hello World!\" RESPONSE Success response A success response returns a JSON file consisting of (metric, value) pairs. For example Code: 200 Content: { \"num_plays\": 1, \"num_tasks\": 1, ... }","title":"api/metrics"}]}